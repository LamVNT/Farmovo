@startuml ForgotPassword_Sequence_Diagram

!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequence {
    ArrowColor #495057
    ActorBorderColor #6C757D
    LifeLineBorderColor #6C757D
    ParticipantBorderColor #6C757D
    ParticipantBackgroundColor #F8F9FA
}

title **Forgot Password - Sequence Diagram**

actor User as U
participant "Frontend" as F
participant "ForgotPasswordController" as C
participant "UserRepository" as UR
participant "EmailServiceImpl" as ES
participant "ForgotPasswordRepository" as FPR
participant "ForgotPasswordService" as FPS
participant "OtpValidator" as OV
participant "PasswordValidator" as PV

== Step 1: Request OTP ==

U -> F: Enter email address
F -> C: POST /verifyMail/{email}
activate C

C -> UR: findByEmail(email)
activate UR
UR --> C: User object
deactivate UR

alt Email not found
    C --> F: Error: "Email không tồn tại"
    F --> U: Display error message
else Email found
    C -> FPR: deleteByUserId(userId)
    activate FPR
    FPR --> C: Deleted old OTP
    deactivate FPR
    
    C -> C: otpGenerator()
    note right: Generate 6-digit OTP
    
    C -> ES: sendSimpleMessage(mailBody)
    activate ES
    ES -> ES: Send email with OTP
    ES --> C: Email sent
    deactivate ES
    
    C -> FPR: save(ForgotPassword)
    activate FPR
    FPR --> C: Saved OTP record
    deactivate FPR
    
    C --> F: Success response with expiration time
    F --> U: Display success message
end
deactivate C

== Step 2: Verify OTP ==

U -> F: Enter OTP code
F -> C: POST /verifyOtp/{email} + OTP
activate C

C -> OV: validateOtp(request)
activate OV
OV --> C: Validation result
deactivate OV

alt OTP format invalid
    C --> F: Error: "Invalid OTP format"
    F --> U: Display error message
else OTP format valid
    C -> FPS: verifyOtp(otp, email)
    activate FPS
    
    FPS -> UR: findByEmail(email)
    activate UR
    UR --> FPS: User object
    deactivate UR
    
    FPS -> FPR: findByOtpAndUser(otp, user)
    activate FPR
    FPR --> FPS: ForgotPassword object
    deactivate FPR
    
    alt OTP expired
        FPS -> FPR: delete(fp)
        activate FPR
        FPR --> FPS: Deleted
        deactivate FPR
        FPS --> C: "OTP expired"
    else OTP valid
        FPS -> FPR: delete(fp)
        activate FPR
        FPR --> FPS: Deleted
        deactivate FPR
        FPS --> C: "OTP verified successfully"
    end
    deactivate FPS
    
    alt OTP verified
        C --> F: Success response
        F --> U: Display success message
    else OTP invalid/expired
        C --> F: Error response
        F --> U: Display error message
    end
end
deactivate C

== Step 3: Change Password ==

U -> F: Enter new password + confirm password
F -> C: POST /change-password/{email} + password data
activate C

C -> C: Check password match
alt Passwords don't match
    C --> F: Error: "Please enter the password again"
    F --> U: Display error message
else Passwords match
    C -> PV: validatePassword(password)
    activate PV
    PV --> C: Validation result
    deactivate PV
    
    alt Password validation failed
        C --> F: Error: "Password validation failed"
        F --> U: Display error message
    else Password valid
        C -> UR: findByEmail(email)
        activate UR
        UR --> C: User object
        deactivate UR
        
        C -> UR: updatePassword(email, password)
        activate UR
        UR -> UR: Update password in database
        UR --> C: Password updated
        deactivate UR
        
        C -> FPR: deleteByUserId(userId)
        activate FPR
        FPR --> C: Deleted OTP records
        deactivate FPR
        
        C --> F: Success: "Password has been changed!"
        F --> U: Display success message
    end
end
deactivate C

@enduml

