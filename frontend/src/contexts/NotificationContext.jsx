import React, { createContext, useContext, useState, useCallback } from 'react';

const NotificationContext = createContext();

export const useNotification = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotification must be used within a NotificationProvider');
    }
    return context;
};

export const NotificationProvider = ({ children }) => {
    const [notifications, setNotifications] = useState([]);
    const [unreadCount, setUnreadCount] = useState(0);

    // Th√™m notification m·ªõi
    const addNotification = useCallback((notification) => {
        const newNotification = {
            id: Date.now(),
            timestamp: new Date(),
            read: false,
            ...notification
        };
        
        setNotifications(prev => [newNotification, ...prev]);
        setUnreadCount(prev => prev + 1);
        
        // T·ª± ƒë·ªông x√≥a notification sau 10 gi√¢y
        setTimeout(() => {
            removeNotification(newNotification.id);
        }, 10000);
    }, []);

    // X√≥a notification
    const removeNotification = useCallback((id) => {
        setNotifications(prev => {
            const notification = prev.find(n => n.id === id);
            if (notification && !notification.read) {
                setUnreadCount(prev => Math.max(0, prev - 1));
            }
            return prev.filter(n => n.id !== id);
        });
    }, []);

    // ƒê√°nh d·∫•u notification ƒë√£ ƒë·ªçc
    const markAsRead = useCallback((id) => {
        setNotifications(prev => 
            prev.map(n => 
                n.id === id ? { ...n, read: true } : n
            )
        );
        setUnreadCount(prev => Math.max(0, prev - 1));
    }, []);

    // ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
    const markAllAsRead = useCallback(() => {
        setNotifications(prev => 
            prev.map(n => ({ ...n, read: true }))
        );
        setUnreadCount(0);
    }, []);

    // X√≥a t·∫•t c·∫£ notifications
    const clearAllNotifications = useCallback(() => {
        setNotifications([]);
        setUnreadCount(0);
    }, []);

    // T·∫°o notification cho c√°c thao t√°c ph·ªï bi·∫øn
    const createImportTransactionNotification = useCallback((action, transactionName) => {
        const messages = {
            create: `ƒê√£ t·∫°o phi·∫øu nh·∫≠p h√†ng: ${transactionName}`,
            update: `ƒê√£ c·∫≠p nh·∫≠t phi·∫øu nh·∫≠p h√†ng: ${transactionName}`,
            status_change: `ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i phi·∫øu nh·∫≠p h√†ng: ${transactionName}`,
            complete: `ƒê√£ ho√†n th√†nh phi·∫øu nh·∫≠p h√†ng: ${transactionName}`,
            cancel: `ƒê√£ h·ªßy phi·∫øu nh·∫≠p h√†ng: ${transactionName}`,
            delete: `ƒê√£ x√≥a phi·∫øu nh·∫≠p h√†ng: ${transactionName}`
        };

        addNotification({
            type: 'success',
            title: 'Phi·∫øu nh·∫≠p h√†ng',
            message: messages[action] || messages.create,
            icon: 'üì¶',
            category: 'import_transaction'
        });
    }, [addNotification]);

    const createSaleTransactionNotification = useCallback((action, transactionName) => {
        const messages = {
            create: `ƒê√£ t·∫°o phi·∫øu b√°n h√†ng: ${transactionName}`,
            update: `ƒê√£ c·∫≠p nh·∫≠t phi·∫øu b√°n h√†ng: ${transactionName}`,
            status_change: `ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i phi·∫øu b√°n h√†ng: ${transactionName}`,
            complete: `ƒê√£ ho√†n th√†nh phi·∫øu b√°n h√†ng: ${transactionName}`,
            cancel: `ƒê√£ h·ªßy phi·∫øu b√°n h√†ng: ${transactionName}`,
            delete: `ƒê√£ x√≥a phi·∫øu b√°n h√†ng: ${transactionName}`
        };

        addNotification({
            type: 'success',
            title: 'Phi·∫øu b√°n h√†ng',
            message: messages[action] || messages.create,
            icon: 'üí∞',
            category: 'sale_transaction'
        });
    }, [addNotification]);

    const createProductNotification = useCallback((action, productName) => {
        const messages = {
            create: `ƒê√£ t·∫°o s·∫£n ph·∫©m: ${productName}`,
            update: `ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${productName}`,
            delete: `ƒê√£ x√≥a s·∫£n ph·∫©m: ${productName}`
        };

        addNotification({
            type: 'info',
            title: 'S·∫£n ph·∫©m',
            message: messages[action] || messages.create,
            icon: 'üè∑Ô∏è',
            category: 'product'
        });
    }, [addNotification]);

    const createCustomerNotification = useCallback((action, customerName) => {
        const messages = {
            create: `ƒê√£ t·∫°o kh√°ch h√†ng: ${customerName}`,
            update: `ƒê√£ c·∫≠p nh·∫≠t kh√°ch h√†ng: ${customerName}`,
            delete: `ƒê√£ x√≥a kh√°ch h√†ng: ${customerName}`
        };

        addNotification({
            type: 'info',
            title: 'Kh√°ch h√†ng',
            message: messages[action] || messages.create,
            icon: 'üë§',
            category: 'customer'
        });
    }, [addNotification]);

    const createStocktakeNotification = useCallback((action, stocktakeName) => {
        const messages = {
            create: `ƒê√£ t·∫°o ki·ªÉm k√™: ${stocktakeName}`,
            update: `ƒê√£ c·∫≠p nh·∫≠t ki·ªÉm k√™: ${stocktakeName}`,
            complete: `ƒê√£ ho√†n th√†nh ki·ªÉm k√™: ${stocktakeName}`,
            cancel: `ƒê√£ h·ªßy ki·ªÉm k√™: ${stocktakeName}`
        };

        addNotification({
            type: 'warning',
            title: 'Ki·ªÉm k√™',
            message: messages[action] || messages.create,
            icon: 'üìä',
            category: 'stocktake'
        });
    }, [addNotification]);

    const createErrorNotification = useCallback((title, message) => {
        addNotification({
            type: 'error',
            title: title || 'L·ªói',
            message: message || 'ƒê√£ x·∫£y ra l·ªói',
            icon: '‚ùå',
            category: 'error'
        });
    }, [addNotification]);

    const createSuccessNotification = useCallback((title, message) => {
        addNotification({
            type: 'success',
            title: title || 'Th√†nh c√¥ng',
            message: message || 'Thao t√°c th√†nh c√¥ng',
            icon: '‚úÖ',
            category: 'success'
        });
    }, [addNotification]);

    const value = {
        notifications,
        unreadCount,
        addNotification,
        removeNotification,
        markAsRead,
        markAllAsRead,
        clearAllNotifications,
        createImportTransactionNotification,
        createSaleTransactionNotification,
        createProductNotification,
        createCustomerNotification,
        createStocktakeNotification,
        createErrorNotification,
        createSuccessNotification
    };

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};
