import { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const ForgotPassword = () => {
    const [step, setStep] = useState(1);
    const [email, setEmail] = useState("");
    const [otp, setOtp] = useState("");
    const [password, setPassword] = useState("");
    const [repeatPassword, setRepeatPassword] = useState("");
    const [message, setMessage] = useState("");
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);
    const [timeLeft, setTimeLeft] = useState(0);
    const [expirationTime, setExpirationTime] = useState(null);
    const countdownRef = useRef(null);
    const navigate = useNavigate();

    const api = import.meta.env.VITE_API_URL;

    const resetMessages = () => {
        setMessage("");
        setError("");
    };

    // Countdown timer effect
    useEffect(() => {
        if (timeLeft > 0) {
            countdownRef.current = setTimeout(() => {
                setTimeLeft(timeLeft - 1);
            }, 1000);
        } else if (timeLeft === 0 && step === 2) {
            setError("‚è∞ M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi.");
        }
        
        return () => {
            if (countdownRef.current) {
                clearTimeout(countdownRef.current);
            }
        };
    }, [timeLeft, step]);

    // Reset timer when step changes
    useEffect(() => {
        if (step !== 2) {
            setTimeLeft(0);
            if (countdownRef.current) {
                clearTimeout(countdownRef.current);
            }
        }
    }, [step]);

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    const handleSendOTP = async () => {
        resetMessages();
        setLoading(true);
        console.log("B·∫Øt ƒë·∫ßu g·ª≠i OTP cho email:", email);
        
        try {
            const res = await axios.post(`${api}/forgot-password/verifyMail/${email}`);
            console.log("Response t·ª´ server:", res.data);
            
            // L·∫•y th·ªùi gian h·∫øt h·∫°n t·ª´ response
            if (res.data.expirationTime) {
                const now = Date.now();
                const expiration = res.data.expirationTime;
                const timeRemaining = Math.max(0, Math.floor((expiration - now) / 1000));
                
                console.log("Th·ªùi gian h·∫øt h·∫°n:", new Date(expiration));
                console.log("Th·ªùi gian c√≤n l·∫°i:", timeRemaining, "gi√¢y");
                
                setExpirationTime(expiration);
                setTimeLeft(timeRemaining);
            }
            
            // Reset OTP input khi g·ª≠i l·∫°i
            setOtp("");
            
            setMessage("üì© OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.");
            setStep(2);
        } catch (err) {
            console.error("L·ªói khi g·ª≠i OTP:", err);
            console.error("Response data:", err.response?.data);
            console.error("Response status:", err.response?.status);
            console.error("Error message:", err.message);
            
            let errorMessage = "";
            if (err.response?.status === 404) {
                errorMessage = "‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.";
            } else if (err.response?.data) {
                errorMessage = "‚ö†Ô∏è " + (typeof err.response.data === 'string' 
                    ? err.response.data 
                    : JSON.stringify(err.response.data));
            } else if (err.message) {
                errorMessage = "‚ö†Ô∏è " + err.message;
            } else {
                errorMessage = "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i.";
            }
            
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };


    const handleVerifyOTP = async () => {
        resetMessages();
        setLoading(true);
        
        // Add delay for better UX
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        try {
            const res = await axios.post(`${api}/forgot-password/verifyOtp/${email}`, {
                otp: otp
            });
            
            if (res.data.status === "success") {
                setMessage("‚úÖ OTP ch√≠nh x√°c.");
                setStep(3);
                // D·ª´ng countdown khi OTP ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng
                if (countdownRef.current) {
                    clearTimeout(countdownRef.current);
                }
                setTimeLeft(0);
            } else {
                setError(res.data.message || "‚ùå OTP kh√¥ng h·ª£p l·ªá.");
            }
        } catch (err) {
            if (err.response?.data?.message) {
                setError(err.response.data.message);
            } else if (err.response?.status === 400) {
                setError("‚ùå M√£ OTP kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i.");
            } else if (err.response?.status === 404) {
                setError("‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
            } else {
                setError("‚ùå X√°c minh OTP th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        } finally {
            setLoading(false);
        }
    };

    const handleChangePassword = async () => {
        resetMessages();
        if (password !== repeatPassword) {
            setError("‚ùå M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp.");
            return;
        }

        setLoading(true);
        try {
            await axios.post(`${api}/forgot-password/change-password/${email}`, {
                password,
                repeatPassword,
            });
            setMessage("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng. ƒêang chuy·ªÉn h∆∞·ªõng...");
            setTimeout(() => navigate("/login"), 2000);
            // eslint-disable-next-line no-unused-vars
        } catch (err) {
            if (err.response?.status === 400 && err.response?.data?.includes("Password validation failed")) {
                setError("‚ùå " + err.response.data);
            } else {
                setError("‚ùå ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i.");
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="max-w-md mx-auto mt-20 p-6 border rounded shadow bg-white space-y-4">
            <h2 className="text-2xl font-semibold text-center mb-4">Forgot Password</h2>

            {message && <p className="text-green-600 text-sm">{message}</p>}
            {error && <p className="text-red-600 text-sm">{error}</p>}

            {step === 1 && (
                <>
                    <label className="block text-sm font-medium">Email</label>
                    <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full border px-3 py-2 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-400"
                        required
                    />
                    <button
                        onClick={handleSendOTP}
                        disabled={loading}
                        className={`w-full py-2 rounded text-white ${loading ? "bg-blue-400" : "bg-blue-600 hover:bg-blue-700"}`}
                    >
                        {loading ? "Sending OTP..." : "Send OTP"}
                    </button>
                </>
            )}

            {step === 2 && (
                <>
                    <label className="block text-sm font-medium">Nh·∫≠p m√£ OTP</label>
                    <input
                        type="text"
                        value={otp}
                        onChange={(e) => setOtp(e.target.value)}
                        className="w-full border px-3 py-2 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-400"
                        required
                        maxLength={6}
                        placeholder="Nh·∫≠p 6 s·ªë OTP"
                    />
                    
                    {/* Countdown timer */}
                    {timeLeft > 0 && (
                        <div className="text-center mb-4">
                            <div className="text-sm text-gray-600">
                                M√£ OTP s·∫Ω h·∫øt h·∫°n sau:
                            </div>
                            <div className={`text-lg font-bold ${timeLeft <= 10 ? 'text-red-600' : 'text-blue-600'}`}>
                                {formatTime(timeLeft)}
                            </div>
                        </div>
                    )}
                    
                    {/* Loading spinner for OTP verification */}
                    {loading && (
                        <div className="text-center mb-4">
                            <div className="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mb-2"></div>
                            <div className="text-sm text-gray-600">
                                ƒêang x√°c minh m√£ OTP...
                            </div>
                        </div>
                    )}
                    
                    <button
                        onClick={handleVerifyOTP}
                        disabled={loading || timeLeft === 0}
                        className={`w-full py-2 rounded text-white ${
                            loading || timeLeft === 0 
                                ? "bg-gray-400 cursor-not-allowed" 
                                : "bg-blue-600 hover:bg-blue-700"
                        }`}
                    >
                        {loading ? "üîç ƒêang x√°c minh OTP..." : timeLeft === 0 ? "OTP ƒë√£ h·∫øt h·∫°n" : "X√°c minh OTP"}
                    </button>
                    
                    <button
                        onClick={() => {
                            console.log("G·ª≠i l·∫°i OTP clicked");
                            handleSendOTP();
                        }}
                        disabled={loading || timeLeft > 0}
                        className={`w-full mt-2 py-2 rounded ${
                            loading || timeLeft > 0
                                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                                : "bg-green-600 hover:bg-green-700 text-white"
                        }`}
                    >
                        {loading ? "ƒêang g·ª≠i..." : timeLeft > 0 ? "Ch·ªù OTP h·∫øt h·∫°n..." : "G·ª≠i l·∫°i OTP"}
                    </button>
                    

                    
                    <button
                        onClick={() => {
                            setStep(1);
                            setTimeLeft(0);
                            if (countdownRef.current) {
                                clearTimeout(countdownRef.current);
                            }
                        }}
                        className="w-full mt-2 bg-gray-300 text-black py-2 rounded hover:bg-gray-400"
                    >
                        ‚Üê Quay l·∫°i
                    </button>
                </>
            )}

            {step === 3 && (
                <>
                    <label className="block text-sm font-medium">M·∫≠t kh·∫©u m·ªõi</label>
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full border px-3 py-2 rounded mb-4"
                        required
                    />
                    <label className="block text-sm font-medium">Nh·∫≠p l·∫°i m·∫≠t kh·∫©u</label>
                    <input
                        type="password"
                        value={repeatPassword}
                        onChange={(e) => setRepeatPassword(e.target.value)}
                        className="w-full border px-3 py-2 rounded mb-4"
                        required
                    />
                    
                    {/* Password requirements */}
                    <div className="bg-gray-50 p-3 rounded text-xs text-gray-600 mb-4">
                        <p className="font-medium mb-2">Y√™u c·∫ßu m·∫≠t kh·∫©u:</p>
                        <ul className="space-y-1">
                            <li>‚Ä¢ √çt nh·∫•t 8 k√Ω t·ª±</li>
                            <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa</li>
                            <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng</li>
                            <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 s·ªë</li>
                            <li>‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*()_+-=[]{}|;:,.)</li>
                            <li>‚Ä¢ Kh√¥ng ch·ª©a k√Ω t·ª± li√™n ti·∫øp (abc, 123)</li>
                            <li>‚Ä¢ Kh√¥ng ch·ª©a k√Ω t·ª± l·∫∑p l·∫°i (aaa, 111)</li>
                        </ul>
                    </div>
                    
                    <button
                        onClick={handleChangePassword}
                        disabled={loading}
                        className={`w-full py-2 rounded text-white ${loading ? "bg-green-400" : "bg-green-600 hover:bg-green-700"}`}
                    >
                        {loading ? "ƒêang ƒë·ªïi m·∫≠t kh·∫©u..." : "ƒê·ªïi m·∫≠t kh·∫©u"}
                    </button>
                    <button
                        onClick={() => setStep(2)}
                        className="w-full mt-2 bg-gray-300 text-black py-2 rounded hover:bg-gray-400"
                    >
                        ‚Üê Quay l·∫°i
                    </button>
                </>
            )}
        </div>
    );
};

export default ForgotPassword;
