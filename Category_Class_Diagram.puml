@startuml Category_Class_Diagram

' ===== GLOBAL STYLE =====
skinparam backgroundColor white
skinparam linetype ortho
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontName Arial
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam arrowColor #495057
skinparam packageStyle rectangle
skinparam ranksep 20
skinparam nodesep 15
top to bottom direction

' ===== CONTROLLER =====
package "Controller" {
    class CategoryController {
        - categoryService : CategoryService
        + getAllCategories() : ResponseEntity<List<CategoryResponseDto>>
        + createCategory(dto : CategoryRequestDto) : ResponseEntity<CategoryResponseDto>
        + updateCategory(id : Long, dto : CategoryRequestDto) : ResponseEntity<CategoryResponseDto>
        + deleteCategory(id : Long) : ResponseEntity<Void>
    }
}

' ===== SERVICE =====
package "Service" {
    interface CategoryService {
        + getAllActiveCategories() : List<CategoryResponseDto>
        + createCategory(dto : CategoryRequestDto) : CategoryResponseDto
        + updateCategory(id : Long, dto : CategoryRequestDto) : CategoryResponseDto
        + deleteCategory(id : Long) : void
    }

    class CategoryServiceImpl {
        - categoryRepository : CategoryRepository
        - categoryMapper : CategoryMapper
        + getAllActiveCategories() : List<CategoryResponseDto>
        + createCategory(dto : CategoryRequestDto) : CategoryResponseDto
        + updateCategory(id : Long, dto : CategoryRequestDto) : CategoryResponseDto
        + deleteCategory(id : Long) : void
    }

    CategoryService <|.. CategoryServiceImpl
}

' ===== MAPPER & DTO =====
package "Mapper & DTO" {
    interface CategoryMapper {
        + toEntity(dto : CategoryRequestDto) : Category
        + toResponseDto(entity : Category) : CategoryResponseDto
    }

    class CategoryRequestDto {
        - name : String
        - description : String
    }

    class CategoryResponseDto {
        - id : Long
        - name : String
        - description : String
        - createAt : LocalDateTime
        - updateAt : LocalDateTime
    }

    CategoryMapper --> CategoryRequestDto
    CategoryMapper --> CategoryResponseDto
    CategoryMapper --> Category
}

' ===== REPOSITORY =====
package "Repository" {
    interface CategoryRepository {
        + findByCategoryName(name : String) : Optional<Category>
    }
}

' ===== UTILS =====
package "Utils" {
    class CategoryValidator {
        + validate(dto : CategoryRequestDto) : void
    }

    class CategoryUtils {
        + filterActiveCategories(categories : List<Category>) : List<Category>
    }

    CategoryValidator --> CategoryRequestDto
}

' ===== EXCEPTION =====
package "Exception" {
    class CategoryNotFoundException <<exception>> {
        + CategoryNotFoundException(message : String)
    }
}

' ===== ENTITY =====
package "Entity" {
    abstract class Base {
        - createdAt : LocalDateTime
        - createdBy : Long
        - updatedAt : LocalDateTime
        - deletedAt : LocalDateTime
        - deletedBy : Long
    }

    class Category {
        - id : Long
        - categoryName : String
        - categoryDescription : String
        - products : List<Product>
    }

    class Product {
        - id : Long
        - productName : String
        - productDescription : String
        - productQuantity : Integer
        - importTransactionDetails : List<ImportTransactionDetail>
        - category : Category
        - store : Store
    }

    class Store {
        - id : Long
        - storeName : String
        - storeDescription : String
        - storeAddress : String
        - products : List<Product>
        - importTransactions : List<ImportTransaction>
        - saleTransactions : List<SaleTransaction>
        - stocktakes : List<Stocktake>
        - debtNotes : List<DebtNote>
        - users : List<User>
    }

    Base <|-- Category
    Base <|-- Product
    Base <|-- Store

    Category ||--o{ Product : "1..*"
    Store ||--o{ Product : "1..*"
}

' ===== RELATIONSHIPS =====
CategoryController --> CategoryService
CategoryServiceImpl --> CategoryRepository
CategoryServiceImpl --> CategoryMapper
CategoryServiceImpl --> CategoryNotFoundException : throws

@enduml
