@startuml Report_Financial_Sequence

skinparam backgroundColor white
skinparam sequenceArrowThickness 2
skinparam sequenceMessageAlign center
skinparam sequenceGroupBodyBackgroundColor #F8F9FA
skinparam sequenceParticipantBorderColor #6C757D
skinparam sequenceParticipantBackgroundColor #E9ECEF
skinparam sequenceLifeLineStroke dash

title Report – Financial (Daily Revenue, Sales Shift Total, Imports Total)

actor Staff
participant ":Financial Reports UI" as UI
participant ":ReportController" as RC
participant ":JwtAuthenticationService" as Auth
participant ":ReportServiceImpl" as RS
participant ":SaleTransactionRepository" as SaleRepo
participant ":ImportTransactionRepository" as ImportRepo

== A. Daily Revenue ==
Staff -> UI: Chọn from(LocalDate), to(LocalDate), storeId(optional)
activate Staff
activate UI
UI -> RC: GET /api/reports/daily-revenue?from&to&storeId?
activate RC
RC -> RC: Normalize dates → from.atStartOfDay(), to.atTime(MAX)
RC -> Auth: extractAuthenticatedUser() + roles
activate Auth
Auth --> RC: User (roles)
deactivate Auth
RC -> RS: getDailyRevenue(fromDateTime, toDateTime, storeId?)
activate RS
RS -> RS: resolve storeId if STAFF
RS -> SaleRepo: findAllSaleActive() or findAllSaleActiveByStore(storeId)
activate SaleRepo
SaleRepo --> RS: List<SaleTransaction>
deactivate SaleRepo
RS -> ImportRepo: findAllImportActive() or findAllImportActiveByStore(storeId)
activate ImportRepo
ImportRepo --> RS: List<ImportTransaction>
deactivate ImportRepo
RS -> RS: sum totals → DailyRevenueDto(totalSale, totalImport, net)
RS --> RC: DailyRevenueDto
deactivate RS
RC --> UI: 200 OK DailyRevenueDto
deactivate RC
UI --> Staff: Render KPIs

== B. Sales Shift Total ==
UI -> RC: GET /api/reports/sales-total?from(LocalDateTime)&to(LocalDateTime)&groupBy&storeId?&cashierId?
activate RC
RC -> Auth: extractAuthenticatedUser() + roles
activate Auth
Auth --> RC: User (roles)
deactivate Auth
RC -> RS: getSalesTotal(from, to, groupBy, storeId?, cashierId?)
activate RS
RS -> RS: resolve storeId if STAFF; filter by cashierId if provided
RS -> SaleRepo: findAllSaleActive() or findAllSaleActiveByStore(storeId)
activate SaleRepo
SaleRepo --> RS: List<SaleTransaction>
deactivate SaleRepo
RS -> RS: group by (hour|cashier|shift); aggregate amount/count → List<SalesShiftTotalDto>
RS --> RC: List<SalesShiftTotalDto>
deactivate RS
RC --> UI: 200 OK List<SalesShiftTotalDto>
deactivate RC
UI --> Staff: Render chart/table

== C. Imports Total ==
UI -> RC: GET /api/reports/imports-total?from(LocalDate)&to(LocalDate)&groupBy(day|week|month)&storeId?&supplierId?
activate RC
RC -> RC: Normalize dates → from.atStartOfDay(), to.atTime(MAX)
RC -> Auth: extractAuthenticatedUser() + roles
activate Auth
Auth --> RC: User (roles)
deactivate Auth
RC -> RS: getImportsTotal(fromDateTime, toDateTime, groupBy, storeId?, supplierId?)
activate RS
RS -> RS: resolve storeId if STAFF
RS -> ImportRepo: findAllImportActive() or findAllImportActiveByStore(storeId)
activate ImportRepo
ImportRepo --> RS: List<ImportTransaction>
deactivate ImportRepo
RS -> RS: filter by date & supplier → group by bucket → List<GroupTotalDto>
RS --> RC: List<GroupTotalDto>
deactivate RS
RC --> UI: 200 OK List<GroupTotalDto>
deactivate RC
UI --> Staff: Render chart/table

deactivate UI
deactivate Staff

@enduml 